create channel classes with different types of moderation 
- ThreadChannel:
    channel that creates a thread for each message sent if condition is met (condition is class method)
    -> the default condition method is nothing  -> no special conditon, allows any message (the channel should have a timer for sending messages)
- ShareMedia (subclass of ThreadChannel)        -> condition is only allowing links or attachments
- ShareSuggestion (subclass of ThreadChannel)   -> condition not allowing any links or attachments




main.py - on_delete_message - `for threat in message.channel.threads` 
    -> might become an issue since there will be an ever increasing amount of threads
    
    -> create Channel object
        -> stores all threads in dict
            -> instant lookup as opposed to looping through each time

            -> would require additional bot.events to keep up to date





- Have the bot create a youtube and spotify playlist with the shared music in it
    -> makes it easier to go through multiple songs
    -> potentially upload a shared file to youtube (unlisted) and add it to the playlist





- Keep track of songs already posted 
    -> let user know if they posted a song that has already been shared, with a link to that message



- Think of a way to automate testing
    - How do we test? Do we check whether all messages have threads?
        - There is no on_create_thread func
        - How do we get it to wait so we can see if that test was successful (creating thread, deleting message, ...)


    - Have the test bot do it?
        - The check where we make sure a message isn't from the bot itself would cause issues

    - create a third bot which does this?
        - annoying
        - benefit: could use entirely different code, wouldn't have to be in main.py

    - Have the main bot do it?
        - would already be running -> no need to 
        - problems
            - automated testing would have to be written in same program as the main bot
            - would need both bots in the same server -> both would try to moderate it, potentially reacting to each other's messages
        - would have to add additional checks for what server message is in as well as what mode (config.testing) it's in